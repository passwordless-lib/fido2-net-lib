@page "/usernameless"
@using BlazorWasmDemo.Client.Shared.Toasts
@inject UserService UserService
@inject ToastService Toasts

<h3>Scenario: Usernameless</h3>

<p>In this scenario we have removed the need for both usernames and passwords. The WebAuthn flow is very similiar to the paswordless flow, but when registering we require the resident key option. User account selection is handled by the client/authenticator. If multiple credentials are found, the user will be able to choose which credential to use.</p>
<p>Note: When we say passwordless, what we mean is that no password is sent over the internet or stored in a database. Password, PINs or Biometrics might be used by the authenticator on the client</p>

@if (!WebAuthnSupported)
{
    <div class="alert alert-danger">
        Please note: Your browser does not seem to support WebAuthn yet. <a href="https://caniuse.com/#search=webauthn" target="_blank">Supported browsers</a>
    </div>
}
<div class="alert alert-warning">
    Please note: At the time of writing (July 2019) this is not supported on all browsers. Confirmed to work on: Windows Edge, Edge (OS X, pre-release), Firefox 69 (Windows), Chrome 76.0.3809.72 beta (OS X)
</div>

<section class="row">
    <div class="col">

        <h3>Create an account</h3>
        <form>
            <label for="displayName">Display name</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="text" placeholder="Anders Åberg" id="displayName" @bind="RegisterDisplayName">
            </div>
        </form>
        <div class="input-group">
            <button class="btn btn-primary" @onclick="Register">Create account</button>
        </div>
    </div>
    <div class="col-2"></div>
    <div class="col">

        <h3>Sign in</h3>
        <div class="input-group">
            <button class="btn btn-primary" @onclick="Login">Sign in</button>
        </div>
    </div>
</section>

<section class="pt-5">
    <h1>Explanation: Username and paswordless login with FIDO2</h1>
    <p>
        In this scenario, WebAuthn is used without a username to securely authenticate the user. This requires the Authenticator to support Resident Keys.
        The flow is visualized in the figure below.
    </p>
    <img src="images/scenario3.png" alt="figure visualizing username and challenge sent together with assertion" />
    <p>In this flow the Relying Party should tell the Authenticator to do User Verification (set UserVerification to required) via Biometrics/pin, thus the authentication is MFA (Something the user has - the private key - and something the user knows/is - the PIN or biometrics). However in scenarios where security requirements are very low we we could discourage user verification to minimize the user interaction needed to sign in. If discouraged, only user presence will be checked (Any human is present at the device).</p>

    <p>
        Read the source code for this demo here: <a href="@(Constants.GithubBaseUrl+"BlazorWasmDemo/Client/Pages/Usernameless.razor")">Usernameless.razor</a> and <a href="@(Constants.GithubBaseUrl+"BlazorWasmDemo/Client/Shared/UserService.cs")">UserService.cs</a>
    </p>
</section>
@code {
    private bool WebAuthnSupported { get; set; } = true;
    
    private string? RegisterDisplayName { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        WebAuthnSupported = await UserService.IsWebAuthnSupportedAsync();
    }
    
    private async Task Register()
    {
        var displayName = RegisterDisplayName;

        var result = await UserService.RegisterAsync(null, displayName);

        if (result == "OK")
        {
            Toasts.ShowToast("Registration successful", ToastLevel.Success);
        }
        else
        {
            Toasts.ShowToast(result, ToastLevel.Error);
        }
    }
    
    private async Task Login()
    {
        var result = await UserService.LoginAsync(null);

        if (result.StartsWith("Bearer"))
        {
            Toasts.ShowToast($"Login successful, JWT received", ToastLevel.Success);
            Console.WriteLine($"Token: {result.Replace("Bearer ", "")}");
        }
        else
        {
            Toasts.ShowToast(result, ToastLevel.Error);
        }
    }
}
