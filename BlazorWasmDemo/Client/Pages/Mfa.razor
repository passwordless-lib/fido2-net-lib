@page "/mfa"
@using BlazorWasmDemo.Client.Shared.Toasts
@inject UserService UserService
@inject ToastService Toasts

<h1>Scenario: 2FA/MFA</h1>
<div class="content">
    <p>This is scenario where we just want to use FIDO as the MFA. The user register and logins with their username and password. For demo purposes, we trigger the MFA registering on sign up.</p>
</div>
@if (!WebAuthnSupported)
{
    <div class="alert alert-danger">
        Please note: Your browser does not seem to support WebAuthn yet. <a href="https://caniuse.com/#search=webauthn" target="_blank">Supported browsers</a>
    </div>
}

<section class="row">
    <div class="col">

        <h3>Create an account</h3>
        <form>
            <label for="register-username">Username</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user"></span>
                </div>
                <input class="form-control" type="text" placeholder="abergs" id="register-username" @bind="RegisterUsername" required>
            </div>

            <label for="displayName">Display name</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="text" placeholder="Anders Åberg" id="displayName" @bind="RegisterDisplayName">
            </div>

            <label for="register-password">Password</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="password" placeholder="Do not use something secret" id="register-password">
            </div>
            <p>
                <small>For demo purposes the password will not be used or stored</small>
            </p>

            <label class="checkbox">
                <input type="checkbox" disabled checked readonly>
                Register MFA on registration
            </label>
        </form>
        <div class="input-group">
            <button class="btn btn-primary" disabled="@(!RegisterFormValid())" @onclick="Register">Create account</button>
        </div>
    </div>
    <div class="col-2"></div>
    <div class="col">

        <h3>Sign in</h3>
        <form>
            <label for="login-username">Username</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="text" placeholder="abergs" id="login-username" required @bind="LoginUsername">
            </div>

            <label for="login-password">Password</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="password" placeholder="Do not use something secret" id="login-password">
            </div>
            <p><small>For demo purposes the password will not be used or stored</small></p>
        </form>
        <div class="input-group">
            <button class="btn btn-primary" disabled="@(!LoginFormValid())" @onclick="Login">Sign in</button>
        </div>
    </div>
</section>

<section class="pt-5">
    <h1>Explanation: 2FA/MFA with FIDO2</h1>
    <p>
        In this scenario, WebAuthn is only used as second factor mechanism. MFA stands for Multi Factor Authentication which generally means it relies on <i>something the user knows</i> (username &amp; password) and <i>something the user has</i> (Authenticator Private key).
        The flow is visualized in the figure below.
    </p>
    <img src="images/scenario1.png" alt="figure visualizing username and password sent together with assertion" />
    <p>In this flow the Relying Party does not necessarily need to tell the Authenticator device to verify the human identity (we could set UserVerification to discourage) to minimize user interactions needed to sign in. More on UserVerification in the other scenarios.</p>

    <p>
        Read the source code for this demo here: <a href="@(Constants.GithubBaseUrl+"BlazorWasmDemo/Client/Pages/Mfa.razor")">Mfa.razor</a> and <a href="@(Constants.GithubBaseUrl+"BlazorWasmDemo/Client/Shared/UserService.cs")">UserService.cs</a>
    </p>
</section>

@code
{
    private bool WebAuthnSupported { get; set; } = true;

    private string RegisterUsername { get; set; } = "";
    private string? RegisterDisplayName { get; set; }

    private string LoginUsername { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        WebAuthnSupported = await UserService.IsWebAuthnSupportedAsync();
    }

    private bool RegisterFormValid() => !string.IsNullOrWhiteSpace(RegisterUsername);
    private async Task Register()
    {
        var username = RegisterUsername;
        var displayName = RegisterDisplayName;

        var result = await UserService.RegisterAsync(username, displayName);

        if (result == "OK")
        {
            Toasts.ShowToast("Registration successful", ToastLevel.Success);
        }
        else
        {
            Toasts.ShowToast(result, ToastLevel.Error);
        }
    }

    private bool LoginFormValid() => !string.IsNullOrWhiteSpace(LoginUsername);
    private async Task Login()
    {
        var result = await UserService.LoginAsync(LoginUsername);

        if (result.StartsWith("Bearer"))
        {
            Toasts.ShowToast($"Login successful, token:{Environment.NewLine}{result.Replace("Bearer ", string.Empty)}", ToastLevel.Success);
        }
        else
        {
            Toasts.ShowToast(result, ToastLevel.Error);
        }
    }
}
