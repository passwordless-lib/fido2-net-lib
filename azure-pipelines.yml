# This is the main build configuration, that build and tests the libraries
name: $(Rev:r)

variables:
  BuildConfiguration: Release
  TargetVmImage: windows-latest
  DOTNET_CLI_TELEMETRY_OPTOUT: '1'

jobs:
# Publish the demo website
- job: demo
  displayName: Demo build
  pool:
    vmImage: $(TargetVmImage)
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET 6.0 SDK'
    inputs:
      packageType: 'sdk'
      version: '6.0.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet-demo
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: 'Demo/Demo.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build $(buildConfiguration)'
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration) --no-restore --nologo "-p:Version=$(Build.BuildNumber)-development"'
      projects: 'Demo/Demo.csproj'
  - task: DotNetCoreCLI@2
    displayName: Publish website [net6.0]
    inputs:
      command: publish
      arguments: '--no-build --nologo --configuration $(BuildConfiguration) --output $(build.ArtifactStagingDirectory)/net6.0 /p:PackageVersion=$(Build.BuildNumber)-development --framework net6.0'
      projects: 'Demo/Demo.csproj'
  - task: PublishBuildArtifacts@1
    displayName: Copy website to artifacts [net6.0]
    inputs:
      pathToPublish: $(build.ArtifactStagingDirectory)/net6.0
      artifactName: Demo .Net 6.0

# Run unit tests
- job: tests
  displayName: Unit tests
  pool:
    vmImage: $(TargetVmImage)
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET 6.0 SDK'
    inputs:
      packageType: 'sdk'
      version: '6.0.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet-unit-tests
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: 'Test/Test.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build $(buildConfiguration)'
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration) --no-restore --nologo "-p:Version=$(Build.BuildNumber)-development"'
      projects: 'Test/Test.csproj'
  - task: DotNetCoreCLI@2
    displayName: Run unit tests
    inputs:
      command: test
      projects: 'Test/Test.csproj'
      arguments: '--configuration $(buildConfiguration) --no-restore --no-build --nologo --collect:"XPlat Code Coverage"'
  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    displayName: ReportGenerator
    inputs:
      reports: '$(Agent.TempDirectory)\**\coverage.cobertura.xml'
      targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      assemblyfilters: '-xunit*'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
  - task: Bash@3
    displayName: 'Upload coverage to Codecov'
    inputs:
      targetType: 'inline'
      script: 'bash <(curl -s https://codecov.io/bash) -Z -t 0b864a87-d3bc-4130-b942-81909f1064c0 -f CodeCoverage/Cobertura.xml'
