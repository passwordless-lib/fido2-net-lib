@page "/overview"
@model Fido2Demo.OverviewModel
@{
    Layout = "_Layout.cshtml";
}

<section class="section">
    <div class="container">
        <div class="columns is-centered">
            <div class="column is-8">
                <h1 class="title is-1">FIDO2 .NET Library (WebAuthn)</h1>
                <div class="content">
                    <p>
                        A working implementation library + demo for FIDO2 and WebAuthn using .NET.
                    </p>
                    <p>Bringing FIDO2 &amp; WebAuthn to asp.net, .net core and full framework.</p>
                    <p>
                        Available on <a href="https://github.com/abergs/fido2-net-lib">GitHub</a> and <a href="https://www.nuget.org/packages/Fido2">Nuget</a>.
                    </p>
                </div>

                <h2 class="title is-2">Purpose</h2>
                <div class="content">
                    <p>Enable passwordless sign in for all .net apps (asp, core, native).</p>
                    <p>To provide a developer friendly and well tested .NET FIDO2 Server / WebAuthn relying party library for the easy validation of registration (attestation) and authentication (assertion) of FIDO2 / WebAuthn credentials, in order to increase the adoption of the technology, ultimately defeating phishing attacks.</p>
                    <p>Consider to <a href="https://opencollective.com/passwordless">become a backer.</a></p>
                </div>
                <h2 class="title is-2">What is FIDO2 / WebAuthn?</h2>
                <div class="content">
                    <h3 class="subtitle is-6">The passwordless web is coming</h3>
                    <p>
                        FIDO2 / WebAuthn is a new open authentication standard, supported by browsers and many large tech companies such as Microsoft, Google etc. The main driver is to allow a user to login without passwords, creating passwordless flows or strong MFA for user signup/login on websites. The standard is not limited to web applications with support coming to Active Directory and native apps. The technology builds on public/private keys, allowing authentication to happen without sharing a secret between the user & platform. This brings many benefits, such as easier and safer logins and makes phishing attempts extremely hard.

                        Read more:

                        Why it's exciting
                        Medium
                        FIDO Alliance
                        Yubico
                        WebAuthn.Guide from Duo Security
                        WebAuthn.io
                        WebAuthn Awesome
                    </p>


                </div>
                <h3 class="title is-3">Features</h3>
                <ul>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Attestation API & verification (Register and verify credentials/authenticators)
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Assertion API & verification (Authenticate users)
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        100% pass rate in conformance testing (results)
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        FIDO2 security keys aka roaming authenticators , like SoloKeys Solo, Yubico YubiKey, and Feitian BioPass FIDO2)
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Device embedded authenticators aka platform authenticators , like Android Key and TPM)
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Backwards compatibility with FIDO U2F authenticators
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Windows Hello
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        All currently referenced cryptographic algorithms for FIDO2 Server
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        All current attestation formats: "packed", "tpm", "android-key", "android-safetynet", "fido-u2f", and "none"
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        FIDO2 Server attestation validation via FIDO Metadata Service
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        WebAuthn extensions
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Examples & demos
                    </li>
                    <li>
                        <span class="icon has-text-success">
                            <i class="fas fa-check-square"></i>
                        </span>
                        Intellisense documentation
                    </li>
                </ul>

                <div class="content">
                    <h3 class="title is-3">Concepts</h3>
                    <p>The following chapter will explain some of the concepts mentioned in the 3 scenarios</p>

                    <h4 class="title is-4">Fido2 vs WebAuthn?</h4>
                    <p>Fido2 is the umbrella term and branding of two new w3c standards: WebAuthn and CTAP2. WebAuthn is the JS API that allows browser to talk to the operating system to generate assertions and CTAP2 is the API that allows the operating system to talk to Authenticators (usb security keys etc)</p>

                    <h4 class="title is-4">Relying Party (RP)</h4>
                    <p>The Relying Party - often called RP - is the server that the browser communicates with. If you are a developer reading this, the Relying Party is probably your webserver. It's the server that runs the fido2-net-lib library.</p>

                    <h4 class="title is-4">User Verification</h4>
                    <p>A FIDO2 server (a.k.a the Relying Party, RP) can ask the authenticator to verify the user. This can be done either via PIN code, biometrics or other factors that securely verifies that it's the expected human in front of the device, not just any human.</p>

                    <h4 class="title is-4">Resident Credentials (RK)</h4>
                    <p>The resident credential is a credential that can be accessed simply with RP ID. When not using RK you will have to provide a list of the credentials (array of ID's) you want the authenticator to use. With RK you don’t need it because the authentication will locate all RK's (only RK credentials), and for each of them generate the assertion over the challenge and return all of them to the client. The client then will display all of the credentials to the user and user will pick one, thus returning selected credential to the relying party.</p>
                </div>
            </div>
        </div>
    </div>
</section>